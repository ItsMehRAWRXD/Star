#pragma once

#include <string>
#include <vector>
#include <map>
#include <memory>
#include <thread>
#include <atomic>
#include <chrono>
#include <filesystem>
#include <fstream>
#include <sstream>
#include <iomanip>
#include <random>
#include <algorithm>
#include <queue>
#include <deque>

#ifdef _WIN32
    #include <windows.h>
    #include <winreg.h>
    #include <shlobj.h>
    #include <tlhelp32.h>
    #include <psapi.h>
    #include <winsvc.h>
    #include <wininet.h>
    #include <crypt32.h>
    #include <wincrypt.h>
    #include <imagehlp.h>
    #include <wintrust.h>
    #include <softpub.h>
    #include <timeapi.h>
    #include <sysinfoapi.h>
    #include <shellapi.h>
    #include <shlwapi.h>
    #include <ntdll.h>
    #include <winternl.h>
    #pragma comment(lib, "wininet.lib")
    #pragma comment(lib, "crypt32.lib")
    #pragma comment(lib, "imagehlp.lib")
    #pragma comment(lib, "wintrust.lib")
    #pragma comment(lib, "winmm.lib")
    #pragma comment(lib, "kernel32.lib")
    #pragma comment(lib, "shell32.lib")
    #pragma comment(lib, "shlwapi.lib")
    #pragma comment(lib, "ntdll.lib")
#endif

namespace fs = std::filesystem;

// Malware Pac-Man Entity
struct MalwareEntity {
    std::string name;
    std::string type;
    std::string path;
    int x, y;
    int score;
    bool isPowerPellet;
    bool isGhost;
    bool isEdible;
    bool isAlive;
    std::chrono::system_clock::time_point lastMove;
};

// Pac-Man Game State
struct PacManGameState {
    int score;
    int level;
    int lives;
    int powerPelletTime;
    bool powerModeActive;
    std::chrono::system_clock::time_point powerModeStart;
    std::vector<std::string> eatenMalware;
    std::vector<std::string> activeGhosts;
    std::map<std::string, int> malwareScores;
};

class MalwarePacMan {
public:
    MalwarePacMan();
    ~MalwarePacMan();
    
    // Core Pac-Man Game
    void startPacManGame();
    void stopPacManGame();
    void pausePacManGame();
    void resumePacManGame();
    void resetPacManGame();
    void nextLevel();
    
    // Pac-Man Movement
    void movePacMan(int direction);
    void moveUp();
    void moveDown();
    void moveLeft();
    void moveRight();
    void teleportPacMan(int x, int y);
    
    // Malware Eating
    void eatMalware(const std::string& malwarePath);
    void eatPowerPellet();
    void eatGhost(const std::string& ghostPath);
    void consumeMalware(const std::string& malwarePath);
    void digestMalware(const std::string& malwarePath);
    void absorbMalware(const std::string& malwarePath);
    
    // Power Pellet System
    void activatePowerMode();
    void deactivatePowerMode();
    void extendPowerMode();
    void boostPowerMode();
    void superPowerMode();
    void ultimatePowerMode();
    
    // Ghost System
    void spawnGhost(const std::string& malwarePath);
    void chaseGhost(const std::string& ghostPath);
    void catchGhost(const std::string& ghostPath);
    void eliminateGhost(const std::string& ghostPath);
    void controlGhost(const std::string& ghostPath);
    void enslaveGhost(const std::string& ghostPath);
    
    // Maze System
    void generateMalwareMaze();
    void createMazeLevel(int level);
    void expandMaze();
    void createMazePortal();
    void createMazeWarp();
    void createMazeDimension();
    
    // Scoring System
    void addScore(int points);
    void multiplyScore(int multiplier);
    void bonusScore(int bonus);
    void comboScore(int combo);
    void perfectScore();
    void infiniteScore();
    
    // Malware Types as Game Elements
    void eatTrojan();
    void eatVirus();
    void eatWorm();
    void eatRansomware();
    void eatSpyware();
    void eatAdware();
    void eatRootkit();
    void eatBackdoor();
    void eatKeylogger();
    void eatBotnet();
    
    // Special Abilities
    void activateWakaWaka();
    void activateChompChomp();
    void activateNomNom();
    void activateOmNomNom();
    void activateDevourMode();
    void activateConsumeMode();
    
    // Advanced Eating Techniques
    void useForkAndKnife();
    void useChopsticks();
    void useSpoon();
    void useHands();
    void useMouth();
    void useStomach();
    
    // Malware Hunting in Pac-Man Style
    void huntInMaze();
    void chaseInMaze();
    void ambushInMaze();
    void trapInMaze();
    void cornerInMaze();
    void eliminateInMaze();
    
    // Power-ups
    void activateSpeedBoost();
    void activateInvincibility();
    void activateTeleport();
    void activateTimeWarp();
    void activateDimensionShift();
    void activateRealityBend();
    
    // Game Modes
    void activateClassicMode();
    void activateArcadeMode();
    void activateSurvivalMode();
    void activateEndlessMode();
    void activateBossMode();
    void activateGodMode();
    
    // Multiplayer (vs other malware)
    void startMultiplayerGame();
    void joinMultiplayerGame();
    void challengeOtherMalware();
    void competeWithMalware();
    void dominateOtherMalware();
    void ruleMalwareArena();
    
    // Tournament System
    void startTournament();
    void joinTournament();
    void competeInTournament();
    void winTournament();
    void becomeChampion();
    void achieveLegendaryStatus();
    
    // Utility Methods
    void setGameSpeed(int speed);
    void setDifficulty(int difficulty);
    void setMazeSize(int width, int height);
    void setPowerPelletDuration(int seconds);
    void setGhostCount(int count);
    
    // Status Methods
    bool isGameActive() const;
    bool isPowerModeActive() const;
    int getScore() const;
    int getLevel() const;
    int getLives() const;
    int getEatenCount() const;
    std::string getCurrentMaze() const;
    std::string getLastError() const;

private:
    std::atomic<bool> gameActive;
    std::atomic<bool> powerModeActive;
    std::atomic<bool> paused;
    
    // Game state
    PacManGameState gameState;
    std::vector<MalwareEntity> malwareEntities;
    std::vector<std::vector<char>> maze;
    std::map<std::string, MalwareEntity> entityMap;
    
    // Pac-Man position and state
    int pacManX, pacManY;
    int pacManDirection;
    int pacManSpeed;
    int pacManLives;
    
    // Game configuration
    int gameSpeed;
    int difficulty;
    int mazeWidth, mazeHeight;
    int powerPelletDuration;
    int ghostCount;
    
    std::string lastError;
    std::random_device rd;
    std::mt19937 gen;
    
    // Threads
    std::thread gameLoopThread;
    std::thread ghostAIThread;
    std::thread powerModeThread;
    std::thread scoringThread;
    
    // Internal methods
    void setError(const std::string& error);
    void clearError();
    
    // Core game methods
    void startPacManGameInternal();
    void stopPacManGameInternal();
    void pausePacManGameInternal();
    void resumePacManGameInternal();
    void resetPacManGameInternal();
    void nextLevelInternal();
    
    // Movement methods
    void movePacManInternal(int direction);
    void updatePacManPosition();
    void checkCollision();
    void handleCollision();
    void teleportPacManInternal(int x, int y);
    
    // Eating methods
    void eatMalwareInternal(const std::string& malwarePath);
    void eatPowerPelletInternal();
    void eatGhostInternal(const std::string& ghostPath);
    void consumeMalwareInternal(const std::string& malwarePath);
    void digestMalwareInternal(const std::string& malwarePath);
    void absorbMalwareInternal(const std::string& malwarePath);
    
    // Power mode methods
    void activatePowerModeInternal();
    void deactivatePowerModeInternal();
    void extendPowerModeInternal();
    void boostPowerModeInternal();
    void superPowerModeInternal();
    void ultimatePowerModeInternal();
    
    // Ghost methods
    void spawnGhostInternal(const std::string& malwarePath);
    void chaseGhostInternal(const std::string& ghostPath);
    void catchGhostInternal(const std::string& ghostPath);
    void eliminateGhostInternal(const std::string& ghostPath);
    void controlGhostInternal(const std::string& ghostPath);
    void enslaveGhostInternal(const std::string& ghostPath);
    
    // Maze methods
    void generateMalwareMazeInternal();
    void createMazeLevelInternal(int level);
    void expandMazeInternal();
    void createMazePortalInternal();
    void createMazeWarpInternal();
    void createMazeDimensionInternal();
    
    // Scoring methods
    void addScoreInternal(int points);
    void multiplyScoreInternal(int multiplier);
    void bonusScoreInternal(int bonus);
    void comboScoreInternal(int combo);
    void perfectScoreInternal();
    void infiniteScoreInternal();
    
    // Thread methods
    void gameLoop();
    void ghostAI();
    void powerModeManager();
    void scoringManager();
    
    // Utility methods
    void initializeGame();
    void initializeMaze();
    void initializeEntities();
    void updateGameState();
    void renderGame();
    void checkWinCondition();
    void checkLoseCondition();
    
    // Malware detection and conversion
    void scanForMalware();
    void convertMalwareToEntities();
    void spawnMalwareEntities();
    void updateMalwareEntities();
    void removeDeadEntities();
    
    // Pathfinding
    std::vector<std::pair<int, int>> findPath(int startX, int startY, int endX, int endY);
    bool isValidMove(int x, int y);
    bool isWall(int x, int y);
    bool isPowerPellet(int x, int y);
    bool isGhost(int x, int y);
    
    // Configuration
    std::map<std::string, int> malwareScores;
    std::map<std::string, std::string> malwareTypes;
    std::map<std::string, bool> powerPelletEffects;
    
    void initializeMalwareScores();
    void initializeMalwareTypes();
    void initializePowerPelletEffects();
};